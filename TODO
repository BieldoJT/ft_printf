-	Pegar o repositório da libft que eu enviei pra usar no makefile
-	Fazer o makefile da ft_printf, pesquisar como fazer um makefile fazer o make de outro


-	Fazer uma função que , ao receber uma string, separe essa string pela quantidade de % que tenha para eu saber o tipo do que vai ser printado.
** acho que a split vai ser util aqui

-	Criar funções que imprima os seus respectivos tipo
	 A fazer:
	-Tipo:
		• %c Prints a single character.
		• %s Prints a string (as defined by the common C convention).
		• %p The void * pointer argument has to be printed in hexadecimal format.
		• %d Prints a decimal (base 10) number.
		• %i Prints an integer in base 10.
		• %u Prints an unsigned decimal (base 10) number.
		• %x Prints a number in hexadecimal (base 16) lowercase format.
		• %X Prints a number in hexadecimal (base 16) uppercase format.
		• %% Prints a percent sign.

OBS:
	Preciso ver como converter numeros hexadecimais e a pegar o endereço tbm


void printf(const char *format, ...) {
    va_list args;
    va_start(args, format);

    while (*format) {
        if (*format == '%') {
            format++;  // Avança para o especificador
            switch (*format) {
                case 'd': {
                    int i = va_arg(args, int);  // Pega o próximo int
                    print_int_as_string(i);     // Converte para string e imprime
                    break;
                }
                case 'f': {
                    double d = va_arg(args, double);  // Pega o próximo double
                    print_double_as_string(d);        // Converte e imprime
                    break;
                }
                case 's': {
                    char* s = va_arg(args, char*);    // Pega o próximo char*
                    print_string(s);                  // Imprime a string
                    break;
                }
                // Outros casos...
            }
        } else {
            print_character(*format);  // Imprime o caractere literal
        }
        format++;
    }

    va_end(args);
}
